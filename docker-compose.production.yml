version: '3'

volumes:
  pg_data_production:
  static_volume:

networks:
  common_ydx_network:
    name: common_ydx_network

# Всё отличие — заменяем build на image и указываем, какой образ использовать
services:
  db:
    restart: always
    image: postgres:13.10
    env_file: .env
    volumes:
      - pg_data_production:/var/lib/postgresql/data
    networks:
      common_ydx_network:
    expose:
      - "5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "django", "-U", "django_user"]
      interval: 1s
      timeout: 1s
      retries: 60

  backend:
    image: alexf2/taski_backend:latest
    env_file: .env
    volumes:
      - static_volume:/backend_static
    networks:
      common_ydx_network:
    depends_on:
      db:
        condition: service_healthy

  frontend:
    image: alexf2/taski_frontend:latest  # Качаем с Docker Hub
    env_file: .env
    # перенесли в пайплайн
    command: cp -r /app/build/. /frontend_static/
    volumes:
      - static_volume:/frontend_static
    networks:
      common_ydx_network:

  gateway:
    image: alexf2/taski_gateway:latest  # Качаем с Docker Hub
    env_file: .env
    volumes:
      - static_volume:/staticfiles/
    ports:
      - 8000:80 
        # порт_хоста:порт_контейнера
    networks:
      common_ydx_network:

# Запускать: docker compose -f docker-compose.production.yml up 

# А потом собрать статику и закинуть на том
# docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
# docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/ 

# И миграции
# docker compose -f docker-compose.production.yml exec backend python manage.py migrate

# И суперюзер
# docker compose -f docker-compose.production.yml exec backend python manage.py createsuperuser

